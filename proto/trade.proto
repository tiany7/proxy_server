syntax = "proto3";
package trade;

message GetAggTradeRequest{
    string symbol = 1;
}

message AggTradeData {
    string symbol = 1;
    bool is_buyer_maker = 2;
    double price = 3;
    double quantity = 4;
    string event_type = 5;
    uint64 first_break_trade_id = 6;
    uint64 last_break_trade_id = 7;
    uint64 aggregated_trade_id = 8;
    uint64 trade_time = 9;
}

message GetAggTradeResponse{
    AggTradeData data = 1;
}

message GetHeartbeatRequest {
    string ping = 1;
}

message GetHeartbeatResponse {
    string metrics = 1;
}

message GetMarketDataRequest {
    string symbol = 1;
    TimeDuration granularity = 2;
}

message GetMarketDataBatchRequest {
    repeated string symbols = 1;
    TimeDuration granularity = 2;
}


message RegisterSymbolRequest {
    repeated string symbols = 1;
}

message RegisterSymbolResponse {
    
}

enum TimeUnit {
    MINUTES = 0;
    SECONDS = 1;
    MILLISECONDS = 2;
}


message TimeDuration {
    int64 value = 1; 
    TimeUnit unit = 2;
}

message GetMarketDataResponse {
    BarData data = 1;
}

// given that the aggregate trade data do not come in the same order as the time series data
// we need to correct the data by adding the missing data in the time series data
// we will pass them to downstreams and fix them later on
// we only need to keep one bar per time period, since the kline data doesn't care about the order of update 
message BarDataWithLogExtra {
    BarData data = 1;
    map<uint64, BarData> missing_data = 2;
}


message BarData {
    uint64 open_time = 1;
    double open = 2;
    double high = 3;
    double low = 4;
    double close = 5;
    double volume = 6;
    uint64 close_time = 7;
    double quote_asset_volume = 8;
    uint64 number_of_trades = 9;
    double taker_buy_base_asset_volume = 10;
    double taker_buy_quote_asset_volume = 11;
    uint64 missing_count = 12;
    uint64 max_id = 13;
    uint64 min_id = 14;
    string symbol = 15;
    bool is_counter_buffer_triggered = 16;
    bool is_time_buffer_triggered = 17;
    uint64 first_agg_trade_id = 18;
    uint64 last_agg_trade_id = 19;
}

message PingRequest{
    string ping = 1;
}

message PingResponse{
    string pong = 1;
}



service Trade{
    rpc GetAggTradeStream(GetAggTradeRequest) returns (stream GetAggTradeResponse);
    rpc GetClientHeartbeat(stream GetHeartbeatRequest) returns (stream GetHeartbeatResponse);
    rpc GetMarketData(GetMarketDataRequest) returns (stream GetMarketDataResponse);
    rpc RegisterSymbol(RegisterSymbolRequest) returns (RegisterSymbolResponse);
    rpc Ping(PingRequest) returns (PingResponse);
    rpc GetMarketDataByBatch(GetMarketDataBatchRequest) returns (stream GetMarketDataResponse);
}


// for utility in server, not for rpc
message Column {
    string column_name = 1;
    oneof data {
    string string_value = 3;
    uint64 uint_value = 4;
    bool bool_value = 5;
    double double_value = 6;
    };
}
